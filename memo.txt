"C:\Program Files (x86)\Microsoft\ILMerge\ILMerge.exe" /v4 /ndebug /out:"$(SolutionDir)DLLInBuilds\$(ProjectName)In$(TargetExt)" "$(OutDir)$(TargetFileName)" "$(OutDir)JsonEditor.exe" "$(OutDir)Newtonsoft.Json.dll"


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Drawing.Design;
using System.Reflection;

class DictionaryConverter : TypeConverter {
    public override object ConvertTo(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType) {
        if (value != null && destinationType == typeof(string)) {
            Dictionary<string, int> d = (Dictionary<string, int>)value;
            //List<string> ss = new List<string>();
            //foreach (var item in d) {
            //    ss.Add(item.Key + ", " + item.Value);
            //}
            //return ss.ToArray();
            string s = "";
            foreach (var item in d) {
                s += item.Key + ", " + item.Value + "\r\n";
            }
            return s;
        }
        return base.ConvertTo(context, culture, value, destinationType);
    }

    ////展開後のプロパティを表示するかどうか
    //public override bool GetPropertiesSupported(ITypeDescriptorContext context) {
    //    return true;
    //}
    ////展開後のプロパティを表示する
    //public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes) {
    //    // TypeDescriptorを使用してプロパティ一覧を取得する
    //    PropertyDescriptorCollection pdc = TypeDescriptor.GetProperties(typeof(KeyValuePair<string, int>[]));
    //    Dictionary<string, int> aaa = (Dictionary<string, int>)value;
    //    //pdc[0].SetValue(null, aaa.Values[0]);
    //    //pdc[1].SetValue(value, 1);
    //    return pdc;
    //    //PropertyDescriptorCollection pdc = TypeDescriptor.GetProperties(value, attributes);

    //    // プロパティ一覧をリフレクションから取得
    //    Type type = value.GetType();
    //    List<string> list = new List<string>();
    //    foreach (PropertyInfo propertyInfo in type.GetProperties()) {
    //        list.Add(propertyInfo.Name);
    //    }

    //    // リフレクションから取得した順でソート
    //    return pdc.Sort(list.ToArray());
    //}



    //public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes) {
    //    //PropertyDescriptorCollection a = new PropertyDescriptorCollection();
    //    return base.GetProperties(context, value, attributes);
    //}


}



//文字列部分がコレクションと表示され展開できない
//[Editor("System.Windows.Forms.Design.StringCollectionEditor, System.Design",
//   typeof(System.Drawing.Design.UITypeEditor)),
//   TypeConverter(typeof(CollectionConverter)),
//   DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]